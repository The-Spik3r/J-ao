// <auto-generated />
using Jīao.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Jīao.Migrations
{
    [DbContext(typeof(JīaoContext))]
    [Migration("20251026060831_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("CartMenu", b =>
                {
                    b.Property<int>("CartsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MenusId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CartsId", "MenusId");

                    b.HasIndex("MenusId");

                    b.ToTable("CartMenu");
                });

            modelBuilder.Entity("Jīao.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Jīao.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MarketStallId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MarketStallId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MarketStallId = 1,
                            Name = "Ramen"
                        });
                });

            modelBuilder.Entity("Jīao.Entities.MarketStall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SellerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("MarketStalls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Ramen & dumplings",
                            Location = "Centro",
                            Name = "Jīao Noodle Bar",
                            SellerId = 1
                        });
                });

            modelBuilder.Entity("Jīao.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Caldo intenso, chashu, negi",
                            ImageUrl = "https://pics.example/ramen1.jpg",
                            Name = "Tonkotsu Ramen",
                            Price = 6500m,
                            Stock = 50
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Dumplings de cerdo",
                            ImageUrl = "https://pics.example/gyoza.jpg",
                            Name = "Gyoza (6)",
                            Price = 4200m,
                            Stock = 100
                        });
                });

            modelBuilder.Entity("Jīao.Entities.Seller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirtName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Sellers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirtName = "Mei",
                            LastName = "Zhang",
                            Password = "hash_demo",
                            State = 0
                        });
                });

            modelBuilder.Entity("Jīao.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Av Siempre Viva 742",
                            Email = "karenbailapiola@gmail.com",
                            FirstName = "Karen",
                            LastName = "Lasot",
                            Password = "Pa$$w0rd",
                            State = 0
                        },
                        new
                        {
                            Id = 2,
                            Address = "Calle Falsa 123",
                            Email = "elluismidetotoras@gmail.com",
                            FirstName = "Luis",
                            LastName = "Gonzales",
                            Password = "lamismadesiempre",
                            State = 0
                        });
                });

            modelBuilder.Entity("CartMenu", b =>
                {
                    b.HasOne("Jīao.Entities.Cart", null)
                        .WithMany()
                        .HasForeignKey("CartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jīao.Entities.Menu", null)
                        .WithMany()
                        .HasForeignKey("MenusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jīao.Entities.Cart", b =>
                {
                    b.HasOne("Jīao.Entities.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("Jīao.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Jīao.Entities.Category", b =>
                {
                    b.HasOne("Jīao.Entities.MarketStall", "MarketStall")
                        .WithMany("Categories")
                        .HasForeignKey("MarketStallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarketStall");
                });

            modelBuilder.Entity("Jīao.Entities.MarketStall", b =>
                {
                    b.HasOne("Jīao.Entities.Seller", "Seller")
                        .WithMany("MarketStalls")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Jīao.Entities.Menu", b =>
                {
                    b.HasOne("Jīao.Entities.Category", "Category")
                        .WithMany("Menus")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Jīao.Entities.Category", b =>
                {
                    b.Navigation("Menus");
                });

            modelBuilder.Entity("Jīao.Entities.MarketStall", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Jīao.Entities.Seller", b =>
                {
                    b.Navigation("MarketStalls");
                });

            modelBuilder.Entity("Jīao.Entities.User", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
